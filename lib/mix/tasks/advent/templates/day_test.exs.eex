defmodule Advent.Y<%= year %>.D<%= day_padded %>Test do
  use ExUnit.Case

  import Advent.Y<%= year %>.D<%= day_padded %>, only: [part_one: 1, part_two: 1]

  @example_input []

  describe "part_one/1" do
    @tag :skip
    test "solves example input" do
      assert part_one(@example_input) == 0
    end

    @tag :skip
    test "solves puzzle input" do
      assert part_one(puzzle_input!()) == 0
    end
  end

  describe "part_one/2" do
    @tag :skip
    test "solves example input" do
      assert part_two(@example_input) == 0
    end

    @tag :skip
    test "solves puzzle input" do
      assert part_two(puzzle_input!()) == 0
    end
  end

  @spec puzzle_input!() :: Enumerable.t()
  defp puzzle_input!() do
    Path.join([__DIR__, "support", "d<%= day_padded %>_input.txt"])
    |> File.stream!()
    |> Stream.map(&String.trim/1)
  end
end
